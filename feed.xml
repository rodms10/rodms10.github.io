<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Rodrigo Silveira</title><link href="http://blog.rodms.com/" rel="alternate"></link><link href="http://blog.rodms.com/feed.xml" rel="self"></link><id>http://blog.rodms.com/</id><updated>2014-04-15T00:00:00-07:00</updated><entry><title>Contributing to FirefoxOS Cordova initiative</title><link href="http://blog.rodms.com/posts/Contributing-to-Firefox-OS-Cordova-initiative/" rel="alternate"></link><updated>2014-04-15T00:00:00-07:00</updated><author><name>Rodrigo Silveira</name></author><id>tag:blog.rodms.com,2014-04-15:posts/Contributing-to-Firefox-OS-Cordova-initiative/</id><summary type="html">&lt;p&gt;After the project I was working on &lt;a href="https://blog.mozilla.org/futurereleases/2014/03/14/metro/"&gt;got cancelled&lt;/a&gt;, I started contributing to &lt;a href="https://wiki.mozilla.org/CordovaFirefoxOS"&gt;FirefoxOS Cordova project&lt;/a&gt;. &lt;a href="http://cordova.apache.org/"&gt;Cordova&lt;/a&gt; is the open source framework for writing multi-platform native mobile applications. You write your app using web standards and Cordova provides you with javascript APIs and the plumbing necessary to access the device's internals, such as battery status, GPS and camera. Neat stuff. Each mobile operating system has its own platform implementation for doing the communication between cordova's javascript API and the native OS code.&lt;/p&gt;
&lt;p&gt;This post will focus on how to get started writing the Firefox OS platform and plugin bits. To get a better understanding on how to use cordova to write a Firefox OS app, I highly recommend the &lt;a href="https://hacks.mozilla.org/2014/02/building-cordova-apps-for-firefox-os/"&gt;mozilla hacks post&lt;/a&gt; on the subject.&lt;/p&gt;
&lt;p&gt;Cordova is written in &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;, you just need to know javascript to work on it. It took me much code digging and asking around to get started, but you won't have to!&lt;/p&gt;
&lt;h2&gt;The repositories&lt;/h2&gt;
&lt;p&gt;Cordova code is organized into multiple repositories. The main ones you need to be aware of for Firefox OS development are &lt;code&gt;cordova-cli&lt;/code&gt;, &lt;code&gt;cordova-firefoxos&lt;/code&gt; and &lt;code&gt;cordova-plugin-*&lt;/code&gt;. Here is a brief description of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cordova-cli&lt;/code&gt; - is where all command line tool code is located. There is some platform specific code under &lt;code&gt;src/metadata&lt;/code&gt; which are config parsers. Firefox OS uses it to get the initial version of the manifest with the correct app name and other values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cordova-firefoxos&lt;/code&gt; - is the repository for the Firefox OS platform tools. The code here is responsible for handling Firefox OS cordova commands and for the initial skeletal app.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cordova-plugin-*&lt;/code&gt; - are repositories for plugins. A plugin repository contains code for each supported platform too.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Running it locally&lt;/h2&gt;
&lt;p&gt;To work on the platform, you need to run on the latest code from the repositories. It's super helpful to run cordova entirely from local files so that you can edit code and see the effects. With the multiple repository organization corodova uses this can be tricky. Make sure you have &lt;a href="http://git-scm.com/downloads"&gt;git&lt;/a&gt; and &lt;a href="http://nodejs.org/download/"&gt;nodejs&lt;/a&gt; installed. A &lt;a href="https://github.com/"&gt;github&lt;/a&gt; account will be handy if you plan to send us your changes.&lt;/p&gt;
&lt;p&gt;First lets get &lt;code&gt;cordova-cli&lt;/code&gt; from mozilla-cordova github account and install the dependencies. From the directory you'd like to keep cordova code run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/mozilla-cordova/cordova-cli.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;cordova-cli
&lt;span class="nv"&gt;$ &lt;/span&gt;npm install
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The cordova binary is located at &lt;code&gt;cordova-cli/bin/cordova&lt;/code&gt;. From now on this is the binary we'll use for all our cordova command line needs. You can add it to your &lt;code&gt;PATH&lt;/code&gt; if you want, I'll use the relative path for clarity. Next let's clone Firefox OS platform bits from &lt;code&gt;cordova-firefoxos&lt;/code&gt; repository:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/mozilla-cordova/cordova-firefoxos.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No need to install dependencies for &lt;code&gt;cordova-firefoxos&lt;/code&gt;, they're already part of the repository. Before creating an app, there's a little trick to tell cordova to use the local platform code we just downloaded. Create a file named &lt;code&gt;firefoxos.json&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;firefoxos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;lt;FULL PATH TO&amp;gt;/cordova-firefoxos&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cordova-firefoxos-dev&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure to set the full path to &lt;code&gt;cordova-firefoxos&lt;/code&gt; folder under &lt;code&gt;uri&lt;/code&gt;. We can now create a new cordova app by running &lt;code&gt;create&lt;/code&gt;. Let's create the app in &lt;code&gt;myapp&lt;/code&gt; folder and give it the even more original project name of &lt;code&gt;io.myapp&lt;/code&gt; and name it &lt;code&gt;myapp&lt;/code&gt;. The fourth parameter to &lt;code&gt;create&lt;/code&gt; is the json config file we just create as a string. To create the app run:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cordova-cli/bin/cordova create myapp io.myapp myapp &lt;span class="s2"&gt;&amp;quot;$(cat firefoxos.json)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively, to use a local copy of &lt;code&gt;cordova-firefoxos&lt;/code&gt; platform code on a cordova app that already exists, you can create a json file with the same contents as above under &lt;code&gt;yourapp/.cordova/config.json&lt;/code&gt;. In fact, that fourth parameter created that file for you. Go check.&lt;/p&gt;
&lt;p&gt;To add the platform, all you need to run is:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;../cordova-cli/bin/cordova platform add firefoxos
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it. If you make any changes to &lt;code&gt;cordova-firefoxos&lt;/code&gt;, remove and add the platform again to make sure you have the latest.&lt;/p&gt;
&lt;h2&gt;Adding a plugin&lt;/h2&gt;
&lt;p&gt;Working with local plugins is much simpler. Lets download the contacts plugin as an exemple:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/mozilla-cordova/cordova-plugin-contacts.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Adding a local version is pretty simple, just add the path as parameter to &lt;code&gt;plugin add&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myapp
&lt;span class="nv"&gt;$ &lt;/span&gt;../cordova-cli/bin/cordova plugin add ../cordova-plugin-contacts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;NOTE: if at this point you hit a &lt;code&gt;ReferenceError: xml_helpers is not defined&lt;/code&gt; error, don't despair. &lt;a href="https://issues.apache.org/jira/browse/CB-6200"&gt;It's a bug&lt;/a&gt; in &lt;code&gt;cordova-plugman&lt;/code&gt; code, which is responsible for plugin management. We can fix it by getting the latest version of plugman, and making sure cordova-cli uses it too. Here's how:&lt;/em&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/apache/cordova-plugman.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;cordova-cli
&lt;span class="nv"&gt;$ &lt;/span&gt;npm install ../cordova-plugman
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ../myapp
&lt;span class="nv"&gt;$ &lt;/span&gt;../cordova-cli/bin/cordova plugin add ../cordova-plugin-contacts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see changes you made to plugin code you have to remove then add the plugin again. To remove the plugin you need to use the plugin name, not the path. Running &lt;code&gt;../cordova-cli/bin/cordova plugin ls&lt;/code&gt; will show you the names of installed plugins. For example, to remove the contacts plugin run &lt;code&gt;../cordova-cli/bin/cordova plugin remove org.apache.cordova.contacts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That's it, you are now running the latest and greatest versions of it all!&lt;/p&gt;
&lt;h2&gt;Firefox OS plugin development: from javascript to javascript&lt;/h2&gt;
&lt;p&gt;Cordova provides you with a javascript API. They try to follow standards when possible. Firefox OS is built on web standards too. Sometimes they use the same API. How can a plugin developer access Firefox OS API when they clash?&lt;/p&gt;
&lt;p&gt;Cordova provides us with a &lt;code&gt;modulemapper&lt;/code&gt; library to access the original values of overwritten properties. Let's take a look at how the &lt;a href="https://github.com/mozilla-cordova/cordova-plugin-battery-status/blob/dev/src/firefoxos/BatteryProxy.js#L22"&gt;battery-status plugin uses &lt;code&gt;modulemapper&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;mozBattery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;cordova&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cordova/modulemapper&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getOriginalSymbol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;navigator.battery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The variable &lt;code&gt;mozBattery&lt;/code&gt; now points to the original &lt;code&gt;navigator.battery&lt;/code&gt;. The first parameter to &lt;code&gt;getOriginalSymbol&lt;/code&gt; is the context, pretty much always  &lt;code&gt;window&lt;/code&gt;. The second is the value you want to get. To find out what value to use on the second parameter, check the &lt;code&gt;&amp;lt;js-module&amp;gt;&lt;/code&gt; element in the plugin's &lt;code&gt;plugin.xml&lt;/code&gt; configuration file. For the &lt;a href="https://github.com/mozilla-cordova/cordova-plugin-battery-status/blob/dev/plugin.xml#L15"&gt;battery-status plugin it is&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;js-module&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;www/battery.js&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;battery&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;clobbers&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;navigator.battery&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/js-module&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;&amp;lt;clobbers&amp;gt;&lt;/code&gt; element's &lt;code&gt;target&lt;/code&gt; attribute has the value that was overwritten.&lt;/p&gt;
&lt;h2&gt;Contributing&lt;/h2&gt;
&lt;p&gt;If you got this far, you're ready to get started! Open up your favorite editor and hack on. If you want to help with Firefox OS support, check out &lt;a href="http://mozilla-cordova.github.io/"&gt;our status site&lt;/a&gt; and &lt;a href="https://wiki.mozilla.org/CordovaFirefoxOS"&gt;the project's wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While writing this post I got news that I'm joining the team. Super excited to improve cordova support for Firefox OS! If you want to chat with us, we hang out on #cordova channel on &lt;a href="https://wiki.mozilla.org/IRC"&gt;mozilla's irc server&lt;/a&gt;.&lt;/p&gt;</summary><category term="cordova"></category><category term="planet"></category></entry><entry><title>Bugzillator: From add-on builder to cfx</title><link href="http://blog.rodms.com/posts/Bugzillator-from-add-on-builder-to-cfx/" rel="alternate"></link><updated>2013-12-28T00:00:00-08:00</updated><author><name>Rodrigo Silveira</name></author><id>tag:blog.rodms.com,2013-12-28:posts/Bugzillator-from-add-on-builder-to-cfx/</id><summary type="html">&lt;p&gt;I was introduced to the &lt;a href="https://builder.addons.mozilla.org/"&gt;add-on builder&lt;/a&gt; by a &lt;a href="https://twitter.com/awfurtado"&gt;friend&lt;/a&gt; a while ago. It's an incredibly easy way to get started writing Firefox add-ons. The online code editor combined with the &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/index.html"&gt;SDK&lt;/a&gt; allows you to instantly get an add-on running. It relieves you from having to worry about all the boilerplate and lets you focus on the code. It inspired me to write an add-on I had thought of some time back: the Bugzillator.&lt;/p&gt;
&lt;p&gt;Sometimes I read blogs and mailing lists that contain bug references. Most of the time I just want to know the title of the bug for some extra context. When they don't have links, I have to copy the bug number to search in bugzilla. Bugzillator scans the DOM for bug numbers and adds links directly to bugzilla. Plus it adds a hover panel with some useful information on the bug.&lt;/p&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;There's no need to scan every single page visited, so I created a toolbar button to activate it. It was just a matter of using the builder &lt;a href="https://builder.addons.mozilla.org/search/"&gt;search tool&lt;/a&gt; to find &lt;a href="https://builder.addons.mozilla.org/package/167058/"&gt;code that did what I wanted&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code that looks for bug patterns has to run in content to have access to the DOM tree. To load the content script on demand I used the &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/tabs.html#attach%28options%29"&gt;tabs attach API&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;let&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tabs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activeTab&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nl"&gt;contentScriptFile:&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bugzillator.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Loading bug info&lt;/h3&gt;
&lt;p&gt;To get bug information I'm using &lt;a href="https://github.com/harthur/bz.js"&gt;bz.js&lt;/a&gt; which is a JavaScript wrapper for &lt;a href="https://wiki.mozilla.org/Bugzilla:REST_API"&gt;bugzilla's REST API&lt;/a&gt;. To keep content script to a minimum it runs in add-on script and communicates using a &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/guides/content-scripts/using-port.html"&gt;port&lt;/a&gt;. A &lt;code&gt;getBug&lt;/code&gt; message from content gets the bug data and returns a &lt;code&gt;onBug&lt;/code&gt; message with the info. On the add-on side we have:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getBug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bugNumber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;bzClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bugNumber&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;bug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onBug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On the content side it's pretty simple too:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Request bug info&lt;/span&gt;
&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;getBug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bugNumber&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Receive bug info&lt;/span&gt;
&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onBug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Do stuff&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Loading the CSS&lt;/h3&gt;
&lt;p&gt;The tabs attach API does not take a &lt;code&gt;contentStyleFile&lt;/code&gt; property like &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/page-mod.html"&gt;page-mod&lt;/a&gt;. The simplest solution I found to load a separate CSS file in content was passing the file content as a message. On add-on script side you send the file contents:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onCss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bugzillator.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now you just add the CSS to the page in content side:&lt;/p&gt;
&lt;table class="codehilitetable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;port&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;onCss&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;headStyle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;headStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headStyle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Simple and effective.&lt;/p&gt;
&lt;h2&gt;Graduating from the builder&lt;/h2&gt;
&lt;p&gt;After some time playing with the add-on builder I got a &lt;a href="https://builder.addons.mozilla.org/package/207471/latest/"&gt;working prototype&lt;/a&gt; that I was happy with. But I missed using &lt;a href="http://www.jetbrains.com/webstorm/"&gt;my favorite JavaScript editor&lt;/a&gt; and wanted a similar workflow using it.&lt;/p&gt;
&lt;p&gt;It was harder than I expected. The add-on builder site gives you 2 options for downloading your work: source code and xpi package. The xpi is the fully packaged add-on and contains a lot more than I cared for. The source code options only gives you a zip file with your code and the code for all dependencies. But how can you make changes and have the add-on reinstall itself like when using the builder?&lt;/p&gt;
&lt;p&gt;On my first attempt I unpacked the xpi (it's just a zip file), found my code and made changes to it. Then I created a script to repackage everything into an xpi. Now I have the updated xpi but for Firefox to pick it up you have to manually install it every time. No go.&lt;/p&gt;
&lt;p&gt;Looking a bit further I found the &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/cfx-tool.html"&gt;cfx tool&lt;/a&gt;. The downloaded source code from the add-on builder gives you the package.json files that the cfx tool needs. The easiest way I found to get the tool working with the downloaded source was to create a &lt;code&gt;package&lt;/code&gt; folder under the main add-on folder and move all dependencies into it. This way cfx was able to find all dependencies and worked fine without any extra command line parameters. The directory structure looks like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;Bugzillator&lt;/span&gt;
 &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;loaded&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icon&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;js&lt;/span&gt;
 &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;bugzillaclient&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;toolbarbutton&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;extended&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;|-&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;  &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
 &lt;span class="o"&gt;|&lt;/span&gt;   &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
 &lt;span class="o"&gt;+-&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With this setup running &lt;code&gt;cfx run&lt;/code&gt; will start Firefox on a temporary profile with the current version of the add-on installed. That's almost good enough, I still had to manually load my html test file.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;While I was developing using the builder I created a very simple html file with some test cases. It would be neat if I could have a command to open Firefox, load the html and run bugzillator without me having to press buttons. The &lt;code&gt;cfx test&lt;/code&gt; command does the trick.&lt;/p&gt;
&lt;p&gt;I added my html test file to the add-on data folder and created a &lt;a href="https://addons.mozilla.org/en-US/developers/docs/sdk/latest/dev-guide/tutorials/unit-testing.html"&gt;cfx compatible unit test&lt;/a&gt;. Now running &lt;code&gt;cfx test&lt;/code&gt; opens up Firefox, loads the html test file and runs bugzillator. It's not automated testing yet, but definitely better.&lt;/p&gt;
&lt;h3&gt;Building the xpi.&lt;/h3&gt;
&lt;p&gt;There's a cfx command for that: &lt;code&gt;cfx xpi&lt;/code&gt;. It packages everything and you won't need to worry about things like &lt;code&gt;install.rdf&lt;/code&gt; and getting the directory structure right.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Add-on builder is great, but I wish there was a clear path to graduation. Converting the downloaded source to use with cfx tool was trivial but required lots of trial and error and documentation surfing.&lt;/p&gt;
&lt;p&gt;The code is available on &lt;a href="https://github.com/rodms10/bugzillator"&gt;github&lt;/a&gt;. I'm using the &lt;a href="https://github.com/rodms10/bugzillator/issues?state=open"&gt;issue tracker&lt;/a&gt; for bugs and new features. Hope you find it useful.&lt;/p&gt;</summary><category term="bugzillator"></category><category term="planet"></category></entry><entry><title>Blogging on blogging</title><link href="http://blog.rodms.com/posts/Blogging-on-blogging/" rel="alternate"></link><updated>2013-11-02T00:00:00-07:00</updated><author><name>Rodrigo Silveira</name></author><id>tag:blog.rodms.com,2013-11-02:posts/Blogging-on-blogging/</id><summary type="html">&lt;p&gt;The idea of starting a blog has been on the back burner for a while. Now, working on open source, I can safely write about my work publicly. With one less excuse out of the way it was time start one.&lt;/p&gt;
&lt;p&gt;But which of the hundreds of blogging platforms to use?&lt;/p&gt;
&lt;p&gt;I learned about &lt;a href="https://ghost.org/"&gt;ghost&lt;/a&gt; while it still was a &lt;a href="http://www.kickstarter.com/projects/johnonolan/ghost-just-a-blogging-platform"&gt;kickstarter project&lt;/a&gt;. I loved it! It's a simple open source blogging platform written in &lt;a href="http://nodejs.org/"&gt;node.js&lt;/a&gt;. It was overfunded and it's now out. I installed it locally and started playing with it. The default generated blog is gorgeous and it's really easy to use. It even has an inline &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; editor with live preview. We have a first contender.&lt;/p&gt;
&lt;p&gt;I plan to add my blog to &lt;a href="http://planet.mozilla.org/"&gt;planet mozilla&lt;/a&gt;. But I'm sure subscribers will not appreciate posts about &lt;a href="http://www.history.com/shows/ancient-aliens"&gt;aliens invading earth&lt;/a&gt; to harvest gold or the weather in Seattle (spoiler alert - it rains a lot). OK, I promise I'll not write about aliens. But anyway I need a way to create a separate feed for posts I wanted to include in planet mozilla. This is when Ghost starts to show it's infancy. It supports tags but doesn't generate feeds based on tags. It also doesn't support code highlighting yet, which is important as I plan to make this blog mostly technical. Of course being open source I could implement those features myself, but I've postponed starting the blog for long enough.&lt;/p&gt;
&lt;p&gt;With ghost ruled out I started looking into static site generators. They have the big advantage of being easier to host. I looked into &lt;a href="http://zespia.tw/hexo/"&gt;hexo&lt;/a&gt;, &lt;a href="http://jekyllrb.com/"&gt;jekyll&lt;/a&gt; and &lt;a href="http://octopress.org/"&gt;octopress&lt;/a&gt;. But the decision was made when I bumped into &lt;a href="http://pmac.io"&gt;Paul McLanahan's&lt;/a&gt; blog, a fellow mozillian. His blog had the feeds per tags that I was looking for plus it lists the posts with a summary on the homepage. Pretty neat. His site uses &lt;a href="http://getpelican.com/"&gt;pelican&lt;/a&gt; so I started looking into it. It's written in python, a plus since it's a very friendly language that I just started learning. It's extensible and already has many &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt; and &lt;a href="https://github.com/getpelican/pelican-themes"&gt;themes&lt;/a&gt;. The search for the blogging platform was over. Pelican it is.&lt;/p&gt;
&lt;p&gt;I really liked ghost's beautiful design, so I decided to create a pelican theme based on ghost's design. This is what you're looking at. I started from ghost's CSS and did some adjustments to it. Hope you like it. The code for the theme is available &lt;a href="https://github.com/rodms10/ghostly"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary><category term="blog"></category><category term="pelican"></category></entry></feed>